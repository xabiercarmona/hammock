apply plugin: 'com.android.application'

def scriptLocation = project.projectDir.getAbsolutePath() //this is the location of THIS file
def testConfig = convertTestSysPropsToHash()

android {
    compileSdk 33
    buildToolsVersion "33.0.0"

    defaultConfig {
        applicationId "cloudant.com.androidtest"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        buildConfigField "String[][]", "TEST_CONFIG", testConfig
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java',
                            "$scriptLocation/../../hammock-http/src/main/java",
                            "$scriptLocation/../../hammock-sync-datastore-core/src/main/java",
                            "$scriptLocation/../../hammock-sync-datastore-android/src/main/java"]
        }
        androidTest {
            java {
                srcDirs = ["$scriptLocation/../../hammock-sync-datastore-core/src/test/java/",
                           "$scriptLocation/../../hammock-sync-datastore-android/src/test/java/"]
                // we would exclude these via categories but it doesn't like the android runner respects them
                exclude '**/Unreliable*Test*'
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude "**/attach_hotspot_windows.dll"
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'

    }

    adbOptions {
        timeOutInMs 5*60*1000 // 5 minutes in ms.
    }

    splits {
        abi {
            enable true
            reset()
            include 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            universalApk true
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}



dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // since our test harness is a standard android app which will run our tests,
    // we include the dependencies necessary for build and test here
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.1'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'commons-codec:commons-codec:1.9'
    implementation 'org.apache.commons:commons-lang3:3.3.2'
    implementation('com.squareup.okhttp3:okhttp-urlconnection:3.13.1') {
        ext.optional = true
    }
    //compile group: 'com.cloudant', name: 'cloudant-http', version:'2.19.0'
    implementation 'com.google.code.findbugs:jsr305:3.0.0' //this is needed for some versions of android

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'net.zetetic:android-database-sqlcipher:3.3.1'

    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'org.mockito:mockito-core:1.10.5'
    androidTestImplementation 'com.crittercism.dexmaker:dexmaker:1.4'
    androidTestImplementation 'com.crittercism.dexmaker:dexmaker-mockito:1.4'
    androidTestImplementation 'com.crittercism.dexmaker:dexmaker-dx:1.4'
    androidTestImplementation 'commons-validator:commons-validator:1.4.0'


    androidTestImplementation 'eu.rekawek.toxiproxy:toxiproxy-java:2.1.1'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation('androidx.test:runner:1.5.1'){
        exclude group:'junit'
    }
    androidTestImplementation('org.objenesis:objenesis:2.1') {
        // the current version of objenesis which mockito depends on is buggy on android, so force a newer version
        force true
    }
}

task copyFixtures(type: Copy) {
    from '../../fixture'
    into 'src/androidTest/resources/fixture'
}
preBuild.dependsOn copyFixtures



tasks.withType(Test) {
    testLogging {
        // Get full exception info for test failures
        exceptionFormat = 'full'
        showExceptions = true
        showCauses = true
        showStackTraces = true
    }
}

def convertTestSysPropsToHash (){
    return "{" +
        System.properties
            .grep { prop -> prop.key.startsWith("test") }
            .collect(new ArrayList()) { prop -> "{\""+prop.key+"\",\""+ prop.value+"\"}"}
            .join(",") +
        "}"
}